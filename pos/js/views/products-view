// pos/js/views/products-view.js
// ============================================
class ProductsView {
    constructor() {
        this.container = document.getElementById('products-panel');
        this.categoriesContainer = null;
        this.productsGrid = null;
        this.currentCategory = 'all';
    }
    
    render(products = [], categories = []) {
        this.container.innerHTML = this.getTemplate();
        this.categoriesContainer = this.container.querySelector('.categories-tabs');
        this.productsGrid = this.container.querySelector('.products-grid');
        
        this.renderCategories(categories);
        this.renderProducts(products);
        this.bindEvents();
    }
    
    getTemplate() {
        return `
            <div class="products-header">
                <div class="categories-tabs"></div>
                <div class="products-filters">
                    <button class="filter-btn" id="filter-available" title="Solo disponibles">
                        <i class="fas fa-check-circle"></i>
                        <span>Disponibles</span>
                    </button>
                    <button class="filter-btn" id="filter-featured" title="Destacados">
                        <i class="fas fa-star"></i>
                        <span>Destacados</span>
                    </button>
                </div>
            </div>
            
            <div class="products-content">
                <div class="products-grid"></div>
                
                <div class="products-empty hidden">
                    <div class="empty-icon">
                        <i class="fas fa-search"></i>
                    </div>
                    <div class="empty-title">No se encontraron productos</div>
                    <div class="empty-subtitle">Intenta cambiar los filtros de búsqueda</div>
                </div>
            </div>
        `;
    }
    
    renderCategories(categories) {
        const allTab = this.createCategoryTab('all', 'Todos', true);
        this.categoriesContainer.appendChild(allTab);
        
        categories.forEach(category => {
            const tab = this.createCategoryTab(
                category.slug, 
                category.name, 
                false,
                category.products_count
            );
            this.categoriesContainer.appendChild(tab);
        });
    }
    
    createCategoryTab(slug, name, active = false, count = null) {
        const tab = document.createElement('button');
        tab.className = `category-tab ${active ? 'active' : ''}`;
        tab.dataset.category = slug;
        
        let content = `<span class="tab-text">${name}</span>`;
        if (count !== null && count > 0) {
            content += `<span class="tab-count">${count}</span>`;
        }
        
        tab.innerHTML = content;
        return tab;
    }
    
    renderProducts(products) {
        if (products.length === 0) {
            this.showEmptyState();
            return;
        }
        
        this.hideEmptyState();
        this.productsGrid.innerHTML = products.map(product => 
            this.createProductCard(product)
        ).join('');
    }
    
    createProductCard(product) {
        const stockStatus = product.getStockStatus();
        const isAvailable = product.isAvailable();
        
        return `
            <div class="product-card ${!isAvailable ? 'unavailable' : ''}" 
                 data-product-id="${product.id}"
                 title="${product.description || product.name}">
                
                <div class="product-image">
                    <i class="${product.icon}"></i>
                    ${!isAvailable ? '<div class="unavailable-overlay"><i class="fas fa-ban"></i></div>' : ''}
                </div>
                
                <div class="product-info">
                    <div class="product-name">${POSUtils.sanitizeHTML(product.name)}</div>
                    <div class="product-brand">${POSUtils.sanitizeHTML(product.brand || '')}</div>
                    <div class="product-sku">SKU: ${product.sku}</div>
                </div>
                
                <div class="product-pricing">
                    <div class="product-price">${POSUtils.formatCurrency(product.price)}</div>
                    ${product.cost_price > 0 ? 
                        `<div class="product-margin">+${POSUtils.formatCurrency(product.getProfitMargin())}</div>` 
                        : ''
                    }
                </div>
                
                <div class="product-stock">
                    <div class="stock-indicator ${stockStatus}">
                        <i class="fas fa-circle"></i>
                    </div>
                    <span class="stock-text">
                        ${this.getStockText(product)}
                    </span>
                </div>
                
                ${isAvailable ? `
                    <div class="product-actions">
                        <button class="btn-add-one" data-product-id="${product.id}" title="Agregar uno">
                            <i class="fas fa-plus"></i>
                        </button>
                        <button class="btn-add-multiple" data-product-id="${product.id}" title="Agregar cantidad">
                            <i class="fas fa-shopping-cart"></i>
                        </button>
                    </div>
                ` : ''}
            </div>
        `;
    }
    
    getStockText(product) {
        const stock = product.stock;
        const minStock = product.min_stock;
        
        if (stock === 0) return 'Sin stock';
        if (stock <= minStock) return `¡Últimos ${stock}!`;
        if (stock <= 10) return `${stock} disponibles`;
        return `${stock} en stock`;
    }
    
    bindEvents() {
        // Category tabs
        this.categoriesContainer.addEventListener('click', (e) => {
            const tab = e.target.closest('.category-tab');
            if (tab) {
                this.selectCategory(tab.dataset.category);
            }
        });
        
        // Product actions
        this.productsGrid.addEventListener('click', (e) => {
            const productId = parseInt(e.target.dataset.productId);
            if (!productId) return;
            
            if (e.target.classList.contains('btn-add-one')) {
                this.dispatchEvent('pos:add-to-cart', { productId, quantity: 1 });
            } else if (e.target.classList.contains('btn-add-multiple')) {
                this.showQuantityModal(productId);
            }
        });
        
        // Double click to add product
        this.productsGrid.addEventListener('dblclick', (e) => {
            const card = e.target.closest('.product-card');
            if (card && !card.classList.contains('unavailable')) {
                const productId = parseInt(card.dataset.productId);
                this.dispatchEvent('pos:add-to-cart', { productId, quantity: 1 });
            }
        });
    }
    
    selectCategory(category) {
        // Update active tab
        this.categoriesContainer.querySelectorAll('.category-tab').forEach(tab => {
            tab.classList.remove('active');
        });
        
        const activeTab = this.categoriesContainer.querySelector(`[data-category="${category}"]`);
        if (activeTab) {
            activeTab.classList.add('active');
        }
        
        this.currentCategory = category;
        this.dispatchEvent('pos:category-change', { category });
    }
    
    showQuantityModal(productId) {
        // Implementation would show quantity selection modal
        const quantity = prompt('Cantidad a agregar:', '1');
        if (quantity && parseInt(quantity) > 0) {
            this.dispatchEvent('pos:add-to-cart', { 
                productId, 
                quantity: parseInt(quantity) 
            });
        }
    }
    
    showEmptyState() {
        this.productsGrid.classList.add('hidden');
        this.container.querySelector('.products-empty').classList.remove('hidden');
    }
    
    hideEmptyState() {
        this.productsGrid.classList.remove('hidden');
        this.container.querySelector('.products-empty').classList.add('hidden');
    }
    
    dispatchEvent(type, detail = {}) {
        document.dispatchEvent(new CustomEvent(type, { detail }));
    }
}